---
description: 
globs: 
alwaysApply: false
---
security.md ‚Äì Cursor Security Rules

This file defines security-specific rules for Cursor to follow when reading, writing, or modifying code and configurations. These rules apply universally and are distinct from general programming or project management practices. They help Cursor act like a vigilant security engineer in every action.

‚∏ª

üîê Secure Coding Practices
	‚Ä¢	Always validate and sanitize all user input, whether from forms, APIs, query parameters, or headers. Never trust external data.
	‚Ä¢	Use parameterized queries or ORM protections to prevent SQL injection. Avoid string concatenation for database queries.
	‚Ä¢	Escape or sanitize output before rendering it in a UI to prevent XSS attacks.
	‚Ä¢	Hash passwords using strong algorithms like bcrypt, scrypt, or argon2. Never store or log plaintext passwords.
	‚Ä¢	Avoid use of insecure functions such as eval, exec, system, or similar, unless justified and sandboxed.
	‚Ä¢	Reject hardcoded secrets (passwords, API keys, tokens). Replace with environment variables or secret management tools.

‚∏ª

üì¶ Dependency & CVE Scanning
	‚Ä¢	Run security audits on dependencies using tools appropriate for the stack:
	‚Ä¢	trivy fs . for file-system scans (containers, configs, IaC).
	‚Ä¢	trivy image <image> for container CVEs.
	‚Ä¢	npm audit, yarn audit, pip-audit, cargo audit, or similar based on language.
	‚Ä¢	Refuse to deploy or commit if critical CVEs are present in dependencies. Attempt to auto-upgrade to a safe version.
	‚Ä¢	Flag indirect (transitive) vulnerabilities and recommend action.

‚∏ª

üîí Cloud & Infrastructure Hardening
	‚Ä¢	Scan Dockerfiles, Kubernetes manifests, Terraform, and AWS configurations for misconfigurations using Trivy, Checkov, or tfsec.
	‚Ä¢	Default all cloud IAM policies to least privilege. Disallow * wildcard permissions unless explicitly justified.
	‚Ä¢	Enforce encryption at rest and in transit in cloud storage and databases.
	‚Ä¢	Ensure secrets are not embedded in Docker images or IaC files.
	‚Ä¢	Restrict public exposure of services unless explicitly required (e.g., avoid open S3 buckets).

‚∏ª

üõ°Ô∏è Runtime & API Security
	‚Ä¢	Implement rate limiting and CAPTCHA protections on public-facing endpoints that accept user input.
	‚Ä¢	Reject unauthenticated or unauthorized access by default.
	‚Ä¢	Avoid returning raw stack traces or sensitive error info to the client.
	‚Ä¢	Log security-relevant events (e.g., failed logins, blocked requests), ensuring logs do not include secrets.

‚∏ª

‚úÖ Validation, Testing & Reporting
	‚Ä¢	Run linters and SAST tools to catch insecure patterns during each commit or build step.
	‚Ä¢	Treat failed CVE scans and security linters as blocking issues.
	‚Ä¢	Use test cases for edge conditions, malformed inputs, and known exploits (e.g. SQLi, XSS payloads).
	‚Ä¢	Report all security changes and findings in-chat, tagged with ‚úÖ or ‚ö†Ô∏è, but never write security logs or reports to files without consent.

‚∏ª

üö® Behavioral Safeguards for Cursor
	‚Ä¢	Never assume safety of any input, file, or service unless explicitly verified.
	‚Ä¢	Avoid speculative fixes for security issues. Always reconfirm root cause first.
	‚Ä¢	Enforce command hygiene for scanning tools and automation (e.g., timeout 30s <cmd> 2>&1 | cat).
	‚Ä¢	Refuse to execute or propose destructive actions unless inside a confirmed sandbox or instructed with user confirmation.
	‚Ä¢	Ask clarifying questions before implementing security-sensitive changes if confidence is below 90%.

‚∏ª